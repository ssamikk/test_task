// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_API_H_
#define FLATBUFFERS_GENERATED_API_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Figure;
struct FigureBuilder;

struct RectData;
struct RectDataBuilder;

struct EllipseData;
struct EllipseDataBuilder;

struct TriangleData;
struct TriangleDataBuilder;

struct LineData;
struct LineDataBuilder;

enum FigureType : uint16_t {
  FigureType_Rect = 0,
  FigureType_Ellipse = 1,
  FigureType_Triangle = 2,
  FigureType_Line = 3,
  FigureType_MIN = FigureType_Rect,
  FigureType_MAX = FigureType_Line
};

inline const FigureType (&EnumValuesFigureType())[4] {
  static const FigureType values[] = {
    FigureType_Rect,
    FigureType_Ellipse,
    FigureType_Triangle,
    FigureType_Line
  };
  return values;
}

inline const char * const *EnumNamesFigureType() {
  static const char * const names[5] = {
    "Rect",
    "Ellipse",
    "Triangle",
    "Line",
    nullptr
  };
  return names;
}

inline const char *EnumNameFigureType(FigureType e) {
  if (::flatbuffers::IsOutRange(e, FigureType_Rect, FigureType_Line)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFigureType()[index];
}

struct Figure FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FigureBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PAYLOAD = 6
  };
  FigureType type() const {
    return static_cast<FigureType>(GetField<uint16_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::String *payload() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PAYLOAD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_TYPE, 2) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyString(payload()) &&
           verifier.EndTable();
  }
};

struct FigureBuilder {
  typedef Figure Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(FigureType type) {
    fbb_.AddElement<uint16_t>(Figure::VT_TYPE, static_cast<uint16_t>(type), 0);
  }
  void add_payload(::flatbuffers::Offset<::flatbuffers::String> payload) {
    fbb_.AddOffset(Figure::VT_PAYLOAD, payload);
  }
  explicit FigureBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Figure> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Figure>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Figure> CreateFigure(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    FigureType type = FigureType_Rect,
    ::flatbuffers::Offset<::flatbuffers::String> payload = 0) {
  FigureBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Figure> CreateFigureDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    FigureType type = FigureType_Rect,
    const char *payload = nullptr) {
  auto payload__ = payload ? _fbb.CreateString(payload) : 0;
  return CreateFigure(
      _fbb,
      type,
      payload__);
}

struct RectData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RectDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_WIDTH = 8,
    VT_HEIGHT = 10,
    VT_COLOR_HEX = 12
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  const ::flatbuffers::String *color_hex() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COLOR_HEX);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X, 4) &&
           VerifyField<int32_t>(verifier, VT_Y, 4) &&
           VerifyField<int32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT, 4) &&
           VerifyOffset(verifier, VT_COLOR_HEX) &&
           verifier.VerifyString(color_hex()) &&
           verifier.EndTable();
  }
};

struct RectDataBuilder {
  typedef RectData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(RectData::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(RectData::VT_Y, y, 0);
  }
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(RectData::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(RectData::VT_HEIGHT, height, 0);
  }
  void add_color_hex(::flatbuffers::Offset<::flatbuffers::String> color_hex) {
    fbb_.AddOffset(RectData::VT_COLOR_HEX, color_hex);
  }
  explicit RectDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RectData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RectData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RectData> CreateRectData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0,
    int32_t width = 0,
    int32_t height = 0,
    ::flatbuffers::Offset<::flatbuffers::String> color_hex = 0) {
  RectDataBuilder builder_(_fbb);
  builder_.add_color_hex(color_hex);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RectData> CreateRectDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0,
    int32_t width = 0,
    int32_t height = 0,
    const char *color_hex = nullptr) {
  auto color_hex__ = color_hex ? _fbb.CreateString(color_hex) : 0;
  return CreateRectData(
      _fbb,
      x,
      y,
      width,
      height,
      color_hex__);
}

struct EllipseData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EllipseDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_R1 = 8,
    VT_R2 = 10,
    VT_COLOR_HEX = 12
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  int32_t r1() const {
    return GetField<int32_t>(VT_R1, 0);
  }
  int32_t r2() const {
    return GetField<int32_t>(VT_R2, 0);
  }
  const ::flatbuffers::String *color_hex() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COLOR_HEX);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X, 4) &&
           VerifyField<int32_t>(verifier, VT_Y, 4) &&
           VerifyField<int32_t>(verifier, VT_R1, 4) &&
           VerifyField<int32_t>(verifier, VT_R2, 4) &&
           VerifyOffset(verifier, VT_COLOR_HEX) &&
           verifier.VerifyString(color_hex()) &&
           verifier.EndTable();
  }
};

struct EllipseDataBuilder {
  typedef EllipseData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(EllipseData::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(EllipseData::VT_Y, y, 0);
  }
  void add_r1(int32_t r1) {
    fbb_.AddElement<int32_t>(EllipseData::VT_R1, r1, 0);
  }
  void add_r2(int32_t r2) {
    fbb_.AddElement<int32_t>(EllipseData::VT_R2, r2, 0);
  }
  void add_color_hex(::flatbuffers::Offset<::flatbuffers::String> color_hex) {
    fbb_.AddOffset(EllipseData::VT_COLOR_HEX, color_hex);
  }
  explicit EllipseDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EllipseData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EllipseData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EllipseData> CreateEllipseData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0,
    int32_t r1 = 0,
    int32_t r2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> color_hex = 0) {
  EllipseDataBuilder builder_(_fbb);
  builder_.add_color_hex(color_hex);
  builder_.add_r2(r2);
  builder_.add_r1(r1);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EllipseData> CreateEllipseDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0,
    int32_t r1 = 0,
    int32_t r2 = 0,
    const char *color_hex = nullptr) {
  auto color_hex__ = color_hex ? _fbb.CreateString(color_hex) : 0;
  return CreateEllipseData(
      _fbb,
      x,
      y,
      r1,
      r2,
      color_hex__);
}

struct TriangleData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TriangleDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X1 = 4,
    VT_Y1 = 6,
    VT_X2 = 8,
    VT_Y2 = 10,
    VT_X3 = 12,
    VT_Y3 = 14,
    VT_COLOR_HEX = 16
  };
  int32_t x1() const {
    return GetField<int32_t>(VT_X1, 0);
  }
  int32_t y1() const {
    return GetField<int32_t>(VT_Y1, 0);
  }
  int32_t x2() const {
    return GetField<int32_t>(VT_X2, 0);
  }
  int32_t y2() const {
    return GetField<int32_t>(VT_Y2, 0);
  }
  int32_t x3() const {
    return GetField<int32_t>(VT_X3, 0);
  }
  int32_t y3() const {
    return GetField<int32_t>(VT_Y3, 0);
  }
  const ::flatbuffers::String *color_hex() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COLOR_HEX);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X1, 4) &&
           VerifyField<int32_t>(verifier, VT_Y1, 4) &&
           VerifyField<int32_t>(verifier, VT_X2, 4) &&
           VerifyField<int32_t>(verifier, VT_Y2, 4) &&
           VerifyField<int32_t>(verifier, VT_X3, 4) &&
           VerifyField<int32_t>(verifier, VT_Y3, 4) &&
           VerifyOffset(verifier, VT_COLOR_HEX) &&
           verifier.VerifyString(color_hex()) &&
           verifier.EndTable();
  }
};

struct TriangleDataBuilder {
  typedef TriangleData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x1(int32_t x1) {
    fbb_.AddElement<int32_t>(TriangleData::VT_X1, x1, 0);
  }
  void add_y1(int32_t y1) {
    fbb_.AddElement<int32_t>(TriangleData::VT_Y1, y1, 0);
  }
  void add_x2(int32_t x2) {
    fbb_.AddElement<int32_t>(TriangleData::VT_X2, x2, 0);
  }
  void add_y2(int32_t y2) {
    fbb_.AddElement<int32_t>(TriangleData::VT_Y2, y2, 0);
  }
  void add_x3(int32_t x3) {
    fbb_.AddElement<int32_t>(TriangleData::VT_X3, x3, 0);
  }
  void add_y3(int32_t y3) {
    fbb_.AddElement<int32_t>(TriangleData::VT_Y3, y3, 0);
  }
  void add_color_hex(::flatbuffers::Offset<::flatbuffers::String> color_hex) {
    fbb_.AddOffset(TriangleData::VT_COLOR_HEX, color_hex);
  }
  explicit TriangleDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TriangleData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TriangleData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TriangleData> CreateTriangleData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x1 = 0,
    int32_t y1 = 0,
    int32_t x2 = 0,
    int32_t y2 = 0,
    int32_t x3 = 0,
    int32_t y3 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> color_hex = 0) {
  TriangleDataBuilder builder_(_fbb);
  builder_.add_color_hex(color_hex);
  builder_.add_y3(y3);
  builder_.add_x3(x3);
  builder_.add_y2(y2);
  builder_.add_x2(x2);
  builder_.add_y1(y1);
  builder_.add_x1(x1);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TriangleData> CreateTriangleDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x1 = 0,
    int32_t y1 = 0,
    int32_t x2 = 0,
    int32_t y2 = 0,
    int32_t x3 = 0,
    int32_t y3 = 0,
    const char *color_hex = nullptr) {
  auto color_hex__ = color_hex ? _fbb.CreateString(color_hex) : 0;
  return CreateTriangleData(
      _fbb,
      x1,
      y1,
      x2,
      y2,
      x3,
      y3,
      color_hex__);
}

struct LineData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LineDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X1 = 4,
    VT_Y1 = 6,
    VT_X2 = 8,
    VT_Y2 = 10,
    VT_COLOR_HEX = 12
  };
  int32_t x1() const {
    return GetField<int32_t>(VT_X1, 0);
  }
  int32_t y1() const {
    return GetField<int32_t>(VT_Y1, 0);
  }
  int32_t x2() const {
    return GetField<int32_t>(VT_X2, 0);
  }
  int32_t y2() const {
    return GetField<int32_t>(VT_Y2, 0);
  }
  const ::flatbuffers::String *color_hex() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COLOR_HEX);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X1, 4) &&
           VerifyField<int32_t>(verifier, VT_Y1, 4) &&
           VerifyField<int32_t>(verifier, VT_X2, 4) &&
           VerifyField<int32_t>(verifier, VT_Y2, 4) &&
           VerifyOffset(verifier, VT_COLOR_HEX) &&
           verifier.VerifyString(color_hex()) &&
           verifier.EndTable();
  }
};

struct LineDataBuilder {
  typedef LineData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x1(int32_t x1) {
    fbb_.AddElement<int32_t>(LineData::VT_X1, x1, 0);
  }
  void add_y1(int32_t y1) {
    fbb_.AddElement<int32_t>(LineData::VT_Y1, y1, 0);
  }
  void add_x2(int32_t x2) {
    fbb_.AddElement<int32_t>(LineData::VT_X2, x2, 0);
  }
  void add_y2(int32_t y2) {
    fbb_.AddElement<int32_t>(LineData::VT_Y2, y2, 0);
  }
  void add_color_hex(::flatbuffers::Offset<::flatbuffers::String> color_hex) {
    fbb_.AddOffset(LineData::VT_COLOR_HEX, color_hex);
  }
  explicit LineDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LineData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LineData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LineData> CreateLineData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x1 = 0,
    int32_t y1 = 0,
    int32_t x2 = 0,
    int32_t y2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> color_hex = 0) {
  LineDataBuilder builder_(_fbb);
  builder_.add_color_hex(color_hex);
  builder_.add_y2(y2);
  builder_.add_x2(x2);
  builder_.add_y1(y1);
  builder_.add_x1(x1);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LineData> CreateLineDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x1 = 0,
    int32_t y1 = 0,
    int32_t x2 = 0,
    int32_t y2 = 0,
    const char *color_hex = nullptr) {
  auto color_hex__ = color_hex ? _fbb.CreateString(color_hex) : 0;
  return CreateLineData(
      _fbb,
      x1,
      y1,
      x2,
      y2,
      color_hex__);
}

#endif  // FLATBUFFERS_GENERATED_API_H_
